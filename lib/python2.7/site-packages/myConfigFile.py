#!/usr/bin/python
# -*- coding: UTF-8 -*-

import os
import ConfigParser
import logging

class MyCfgFile(object):
    '''This class is used to read/write the config file, including default parameters and project database information.'''
    
    def __init__(self, cfgDir):
        self.__logger = logging.getLogger('monitor_local.MyCfgFile')
        if not os.path.isdir(cfgDir):
            os.makedirs(cfgDir)
        cfgDir = os.path.abspath(cfgDir)
        self.__cfgFile = os.path.join(cfgDir, 'pymonitor_local.conf')
        self.__cfgObj  = ConfigParser.SafeConfigParser()
        self.__cfgVersion = '0.1.0'
        if not os.path.isfile(self.__cfgFile):
            self.__logger.info("There is no config file: %s", self.__cfgFile)
            self.__initCfgFile()
        else:
            self.__logger.info("Reading config file: %s", self.__cfgFile)
            self.__cfgObj.read(self.__cfgFile)
            if self.__cfgObj.get('base', 'configVersion') != self.__cfgVersion:
                self.__logger("The version of config file is not latest: %s", self.__cfgFile)
                self.__initCfgFile()
    
    def setDefEmail(self, emailAddr):
        self.__logger.info("Set default email: %s", emailAddr)
        self.__setOpt('base', 'defaultEmail', emailAddr)
    
    def hasProject(self, prjName):
        if self.__cfgObj.has_option('project', prjName):
            return True
        else:
            return False
    
    def addProject(self, prjName, prjDB):
        if not self.__cfgObj.has_option('project', prjName):
            self.__logger.info("Add project to config file, Project Name: %s, Project db: %s", prjName, prjDB)
            self.__setOpt('project', prjName, prjDB)
        else:
            self.__logger.warning("The project already in config file: %s", prjName)
    
    def delProject(self, prjName):
        if self.__cfgObj.has_option('project', prjName):
            self.__logger.info("Delete project from config file: %s", prjName)
            self.__cfgObj.remove_option('project', prjName)
        else:
            self.__logger.warning("There is no such project in config file: %s", prjName)
    
    def getPrjDB(self, prjName):
        if self.__cfgObj.has_option('project', prjName):
            self.__logger.info("Get project database from config file, project Name: %s", prjName)
            return self.__getOpt('project', prjName)
        else:
            self.__logger.error("There is no such project in config file: %s", prjName)
            return ''
    
    def __initCfgFile(self):
        self.__logger.info("Initialize the config file")
        self.__initSection('project')
        self.__initSection('base')
        self.__initOpt('base', 'configVersion', self.__cfgVersion)
        self.__initOpt('base', 'defaultEmail', '')
        self.__initOpt('base', 'defaultEmailMode', '2')
        self.__initOpt('base', 'JobCheckInterval', '10')
        self.__initOpt('base', 'JobMaxRetries', '5')
        self.__initOpt('base', 'GlobalMaxJobs', '100')
        
        self.__update()
    
    def __initSection(self, section):
        if not self.__cfgObj.has_section(section):
            self.__cfgObj.add_section(section)
    
    def __initOpt(self, section, optName, optValue):
        if section == 'base' and optName == 'configVersion':
            self.__cfgObj.set(section, optName, optValue)
        elif not self.__cfgObj.has_option(section, optName):
            self.__cfgObj.set(section, optName, optValue)
    
    def __update(self):
        with open(self.__cfgFile, 'w') as fh:
            self.__cfgObj.write(fh)
    
    def __getOpt(self, section, optName):
        return self.__cfgObj.get(section, optName)
    
    def __setOpt(self, section, optName, optValue):
        self.__cfgObj.set(section, optName, optValue)
        self.__update()
    
if __name__ == '__main__':
    cfgFileObj = MyCfgFile('./')
    cfgFileObj.setDefEmail('mayubin@genomics.cn')
    cfgFileObj.addProject('testPrj', 'testPrj.db')
    print cfgFileObj.getPrjDB('testPrj')