#!/usr/bin/python
# -*- coding: UTF-8 -*-

import os
import subprocess
import persistent

class MyJob(persistent.Persistent):
    '''This class represents a single job.'''
    
    def __init__(self, script):
        self.script = os.path.abspath(script)
        self.status = 0  # status: 0-not start, 1-running, 2-finished.
        self.readyFlag = False
        self.pid  = '' # pid: un-running = '', running = pid
        self.__dependent  = persistent.list.PersistentList()
        self.__stdoutFile = self.script + '.o'
        self.__stderrFile = self.script + '.e'
        self.__finishFile = self.script + '.sign'
    
    def addDepJobName(self, jobName):
        self.__dependent.append(jobName)
    
    def getDepJobNameList(self):
        jobNameList = []
        for jobName in self.__dependent:
            jobNameList.append(jobName)
        return jobNameList
    
    def run(self):
        fh_o = open(self.__stdoutFile, 'w')
        fh_e = open(self.__stderrFile, 'w')
        jobCmd = "sh %s && echo finish > %s" % (self.script, self.__finishFile)
        p = subprocess.Popen(jobCmd, stdout=fh_o, stderr=fh_e, shell=True)
        self.pid = p.pid
        self.status = 1
    
    def updateStatus(self):
        if self.pid != '' and os.path.isfile(self.__finishFile):
            self.status = 2

class MyProject(persistent.Persistent):
    '''This class represents the base information of a project'''
    
    def __init__(self, prjName):
        self.prjName = prjName
        self.maxJobNum = 10
        self.runningJobNum = 0
        self.finishedFlag = False
