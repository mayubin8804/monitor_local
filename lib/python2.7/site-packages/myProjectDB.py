#!/usr/bin/python
# -*- coding: UTF-8 -*-

import os
import sys
import glob
import subprocess
import persistent
from ZODB import FileStorage, DB
from BTrees.OOBTree import OOBTree
import transaction

class MyProject(persistent.Persistent):
    '''This class represents the project database.'''
    
    def __init__(self, prjName):
        self.__prjName = prjName
        self.__maxJobNum = 10
        self.__curJobs = 0
        self.__allFinishedFlag = False
    
    def setMaxJobNum(self, maxJobNum):
        self.__maxJobNum = maxJobNum

class MyJob(persistent.Persistent):
    '''This class represents a single job.'''
    
    def __init__(self, script):
        self.__script = script
        self.__pid = ''       # pid: un-running = '', running = pid
        self.__status = 0     # status: 0-not started, 1-running but not finished, 2-finished.
        self.__retriedTimes = 0
        self.__dependent = persistent.list.PersistentList()
        self.__stdoutFile = self.__script + '.o'
        self.__stderrFile = self.__script + '.e'
        self.__finishFile = self.__script + '.sign'
    
    def addDependent(self, job):
        self.__dependent.append(job)
    
    def run(self):
        fh_o = open(self.__stdoutFile, 'w')
        fh_e = open(self.__stderrFile, 'w')
        job = self.__script + ' && echo finish > ' + self.__finishFile
        p = subprocess.Popen(job, stdout=fh_o, stderr=fh_e, shell=True)
        self.__pid = p.pid
    
    def getStatus(self):
        return self.__status
    
    def updateStatus(self):
        if self.__pid != '':
            if os.path.isfile(self.__finishFile):
                self.__status = 2
            else:
                self.__status = 1

class ProjectDB(object):
    def __init__(self, prjName, prjDBFile):
        self.__storage = FileStorage.FileStorage(prjDBFile)
        self.__db = DB(self.__storage)
        self.__conn = self.__db.open()
        self.__dbroot = self.__conn.root()
        if not self.__dbroot.has_key('project'):
            self.__dbroot['project'] = MyProject(prjName)
            self.__dbroot['jobs'] = OOBTree()
        self.__prjObj = self.__dbroot['project']
        self.__jobDic = self.__dbroot['jobs']
    
    def importQsubsge(self, jobListFile, addMode, jobSplitNum=1):
        jobList = self.__splitQsubsgeJob(jobListFile, jobSplitNum)
        prevJobList = self.__getDBJobList()
        for job in jobList:
            jobObj = MyJob(job)
            if addMode == 1:
                for prevJob in prevJobList:
                    jobObj.addDependent(prevJob)
            self.__jobDic[job] = jobObj
    
    def importPymonitor(self, jobListFile, addMode):
        with open(jobListFile, 'r') as fh:
            for line in fh:
                jobStrList = line.strip().split()
                firstJob = ''
                secondJob = ''
                for jobStr in jobStrList:
                    job = jobStr.split(':')[0]
                    if firstJob == '':
                        firstJob = job
                    else:
                        secondJob = job
                    if self.__jobDic.has_key(job):
                        continue
                    # new job
                    self.__jobDic[job] = MyJob(job)
                if secondJob != '':
                    self.__jobDic[secondJob].addDependent(firstJob)
    
    def close(self):
        transaction.commit()
        self.__conn.close()
        self.__db.close()
        self.__storage.close()
    
    def __getDBJobList(self):
        return self.__jobDic.keys()
    
    def __splitQsubsgeJob(self, taskListFile, jobSplitNum=1):
        taskDir = "%s.%s.qsub" % (taskListFile, os.getpid())
        os.mkdir(taskDir)
        taskNo = 1
        lineNo = 0
        oneTask = ''
        taskList = []
        with open(taskListFile, 'r') as fh_list:
            for line in fh_list:
                lineNo += 1
                oneTask += line
                if lineNo % jobSplitNum == 0:
                    taskScript = os.path.join(taskDir, "task_%d.sh" % taskNo)
                    taskList.append(taskScript)
                    with open(taskScript, 'w') as fh_task:
                        fh_task.write(oneTask)
                    oneTask = ''
                    taskNo += 1
        return taskList

if __name__ == '__main__':
    with open('./job.list', 'w') as fh:
        for i in range(6):
            fh.write('echo %d\n' % i)
    projectDBObj = ProjectDB('test', './test.db')
    projectDBObj.importQsubsge('./job.list', 0, 3)
    projectDBObj.close()