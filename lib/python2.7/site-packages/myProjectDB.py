#!/usr/bin/python
# -*- coding: UTF-8 -*-

import os
import sys
import logging
from ZODB import FileStorage, DB
import zc.lockfile
from BTrees.OOBTree import OOBTree
import transaction
import myProject

logging.getLogger('ZODB.FileStorage')
logging.getLogger('zc.lockfile')

class DBisBusyError(Exception):
    '''Database is busy'''

class MyZODB(object):
    def __init__(self, dbPath):
        self.dbPath = os.path.abspath(dbPath)
        self.logger = logging.getLogger('monitor_local.MyProjectDB.MyZODB')
        self.logger.info("Open database: %s", self.dbPath)
        try:
            self.storage = FileStorage.FileStorage(self.dbPath)
        except zc.lockfile.LockError:
            raise DBisBusyError("Database is in use by other progress")
        self.db   = DB(self.storage)
        self.conn = self.db.open()
        self.root = self.conn.root()
        self.openFlag = True
    
    def close(self):
        self.logger.info("Close database: %s", self.dbPath)
        self.conn.close()
        self.db.close()
        self.storage.close()
        self.openFlag = False
    
    def removeDBFile(self):
        self.logger.info("Remove database: %s", self.dbPath)
        if self.openFlag:
            self.close()
        for suffix in ('', '.index', '.lock', '.tmp'):
            dbFile = self.dbPath + suffix
            if os.path.isfile(dbFile):
                os.remove(dbFile)

class MyProjectDB(object):
    def __init__(self, prjName, prjDBFile):
        self.prjName   = prjName
        self.prjDBFile = os.path.abspath(prjDBFile)
        self.logger = logging.getLogger('monitor_local.MyProjectDB')
        try:
            self.myZODBObj = MyZODB(self.prjDBFile)
        except DBisBusyError:
            raise
        if not hasattr(self.myZODBObj.root, 'projectBaseInfo'):
            self.logger.info("Initializing the database...")
            self.myZODBObj.root.projectBaseInfo = myProject.MyProject(prjName)
            self.myZODBObj.root.jobs = OOBTree()
        self.prjObj = self.myZODBObj.root.projectBaseInfo
        self.jobsOOBTree = self.myZODBObj.root.jobs
    
    def setMaxJobNum(self, maxJobNum):
        self.logger.info("Set the max job number of the project '%s' to %d", self.prjName, maxJobNum)
        self.prjObj.maxJobNum = maxJobNum
    
    def importQsubsge(self, jobListFile, addMode, jobSplitNum=1):
        self.prjObj.finishedFlag = False
        jobListFile = os.path.abspath(jobListFile)
        self.logger.info("Importing tasks of qsubsge format into project db: %s", jobListFile)
        jobList = self.__splitQsubsgeJob(jobListFile, jobSplitNum)
        totalJobNum = 0
        addJobNum   = 0
        preJobNameList = list(self.jobsOOBTree.keys())
        for job in jobList:
            totalJobNum += 1
            if job in self.jobsOOBTree:
                continue
            else:
                # new job
                addJobNum += 1
                jobObj = myProject.MyJob(job)
                if addMode == 1:
                    for prevJobName in preJobNameList:
                        jobObj.addDepJobName(prevJobName)
                self.jobsOOBTree[job] = jobObj
        self.logger.info("Finish importing tasks. Total job number: %d, added job number: %d", totalJobNum, addJobNum)
    
    def importPymonitor(self, jobListFile, addMode=0):
        self.prjObj.finishedFlag = False
        jobListFile = os.path.abspath(jobListFile)
        self.logger.info("Importing tasks of pymonitor format into project db: %s", jobListFile)
        totalJobNum = 0
        addJobNum   = 0
        with open(jobListFile, 'r') as fh:
            for line in fh:
                jobStrList = line.strip().split()
                firstJob = ''
                secondJob = ''
                for jobStr in jobStrList:
                    totalJobNum += 1
                    job = jobStr.split(':')[0]
                    if firstJob == '':
                        firstJob = job
                    else:
                        secondJob = job
                    if job in self.jobsOOBTree:
                        continue
                    else:
                        # new job
                        addJobNum += 1
                        self.jobsOOBTree[job] = myProject.MyJob(job)
                if secondJob != '':
                    self.jobsOOBTree[secondJob].addDepJobName(firstJob)
        self.logger.info("Finish importing tasks. Total job number: %d, added job number: %d", totalJobNum, addJobNum)
    
    def updateDB(self):
        self.logger.info("updating the database of project: %s...", self.prjName)
        if self.prjObj.finishedFlag:
            self.logger.info("all jobs of the project already finished, no need to update")
            return
        
        self.logger.info("updating the status of every job...")
        for jobName in self.jobsOOBTree:
            self.logger.debug("update the status of job: %s", jobName)
            self.jobsOOBTree[jobName].updateStatus()
        
        runJobNum = 0
        finishFlag = True
        for jobName in self.jobsOOBTree:
            jobStatus = self.jobsOOBTree[jobName].status
            if jobStatus == 0:  # not start
                finishFlag = False
                readyFlag = True
                for depJobName in self.jobsOOBTree[jobName].getDepJobNameList():
                    if self.jobsOOBTree[depJobName].status != 2:
                        readyFlag = False
                        break
                self.jobsOOBTree[jobName].readyFlag = readyFlag
            elif jobStatus == 1:  # running
                finishFlag = False
                runJobNum += 1
        self.prjObj.runningJobNum = runJobNum
        self.prjObj.finishedFlag = finishFlag
        self.logger.info("Finish updating the database of project: %s", self.prjName)
    
    def runReadyJob(self):
        self.logger.info("submitting new jobs of project: %s...", self.prjName)
        if self.prjObj.finishedFlag:
            self.logger.info("all jobs of the project already finished")
            return
        
        maxJobNum = self.prjObj.maxJobNum
        runJobNum = self.prjObj.runningJobNum
        self.logger.info("The max running job number of project '%s' is %d", self.prjName, maxJobNum)
        self.logger.info("There are %d jobs are running", runJobNum)
        newAddJobNum = 0
        for jobName in self.jobsOOBTree:
            if newAddJobNum >= maxJobNum - runJobNum:
                break
            if not self.jobsOOBTree[jobName].readyFlag or self.jobsOOBTree[jobName].status == 2:
                continue
            self.logger.debug("Submit the job: %s", jobName)
            self.jobsOOBTree[jobName].run()
            newAddJobNum += 1
        self.logger.info("Finish submitting new jobs of project: %s, submit job num: %d", self.prjName, newAddJobNum)
    
    def close(self):
        transaction.commit()
        self.myZODBObj.close()
    
    def removeDB(self):
        self.myZODBObj.removeDBFile()
    
    def __splitQsubsgeJob(self, taskListFile, jobSplitNum=1):
        taskDir = "%s.%s.qsub" % (taskListFile, os.getpid())
        os.mkdir(taskDir)
        taskNo = 1
        lineNo = 0
        oneTask = ''
        taskList = []
        with open(taskListFile, 'r') as fh_list:
            for line in fh_list:
                lineNo += 1
                oneTask += line
                if lineNo % jobSplitNum == 0:
                    taskScript = os.path.join(taskDir, "task_%d.sh" % taskNo)
                    taskList.append(taskScript)
                    with open(taskScript, 'w') as fh_task:
                        fh_task.write(oneTask)
                    oneTask = ''
                    taskNo += 1
        return taskList

if __name__ == '__main__':
    #with open('./job.list', 'w') as fh:
    #    for i in range(6):
    #        fh.write('echo %d\n' % i)
    myProjectDBObj = MyProjectDB('test', './test.db')
    #myProjectDBObj.setMaxJobNum(20)
    #myProjectDBObj.importQsubsge('./job.list', 0, 3)
    #myProjectDBObj.close()
    try:
        myProjectDBObj = MyProjectDB('test', './test.db')
    except DBisBusyError, e:
        print e
    #removeDBFile('./test.db')